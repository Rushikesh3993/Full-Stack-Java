sql is structured query language
structure query language means store and manage the data in relational database management system.
sql is used for database creation , deletion, fetching , row and modifying rows.
tuffle means - rows 
table is know as relation
sql is not case sensitive.
stores the data in tabular format means rows and columns.
select * from employee;
insert into employee values(101,'Rushi','rushi@gmail.com');


//database
- create database mydb;
- drop database mydb;
- rename database mydb TO mysql;
- use mydb;

//table
- create table table_name(column_name1 datatype, column_name2 datatype);
- create table student(rollno int(255), name varchar(50));
- insert into student(rollno,name)values(1, "Rushi");
- DELETE FROM student
WHERE rollno = 1 AND name = 'Rushi'
LIMIT 1;


//DELETE
- delete from student; //dml
  means only table content will be delete
- drop table student; //ddl
  means it will delete whole table with structure.
- delete from student where rollno = 1;
- delete from student where name = 'Sham';

//clauses
- WHERE
- orderby


- create table student(id int(255) auto_increment, name varchar(100),   primary key(id));
- insert into student(name)values('abc);  //1 abc
- insert into student(name)values('xyz'); //2 xyz
- delete from student;
- insert into student(name)values('pqr'); //3 pqr
- truncate table student;
- insert into student(name)values('lmn'); //1 lmn

‚¨áÔ∏è

üîπ 1. DELETE

-  Removes specific rows from a table (using WHERE).
  
-  If WHERE is not given ‚Üí all rows will be deleted.
  
-  Slower than TRUNCATE (checks each row).
  
-  Can be rolled back (if inside a transaction).
  
-  Does not reset AUTO_INCREMENT counter.

Example:

- DELETE FROM students WHERE rollno = 5;

üîπ 2. TRUNCATE

- Removes all rows from a table (cannot use WHERE).

- Very fast (doesn‚Äôt check each row).

- Resets AUTO_INCREMENT counter.

- Cannot be rolled back in some DBMS (like MySQL).

- Table structure remains.

üëâ Example:

- TRUNCATE TABLE students;

üîπ 3. DROP

- Deletes the entire table (structure + data).

- After DROP, the table no longer exists.

- Cannot be rolled back.

üëâ Example:

- DROP TABLE students;


üëâ So, in short:

- DELETE = remove some rows

- TRUNCATE = empty the table

- DROP = remove the whole table

//auto_increment we can start from anywhere like 1 or 101.

//alter
alter table statement is used to add , modify or delete cloumns in an existing table.
- it is also used to rename a table.
- alter table student rename to students;
- alter table studnets add address varchar(100);
- alter table students modify address varchar(500);
- alter table students change address per_address varchar(500);
- alter table students drop column per_address;



üîπ ALTER Command in SQL

Used to modify the structure of an existing table (not the data).

We can add, modify, rename, or drop columns or even rename the table.

‚úÖ Uses of ALTER

1. Add a new column

  - ALTER TABLE table_name ADD column_name datatype;

  üëâ Example:
  - ALTER TABLE students ADD age INT;

2. Delete (drop) a column

   - ALTER TABLE table_name DROP COLUMN column_name;

  üëâ Example:

  - ALTER TABLE students DROP COLUMN age;

3. Modify datatype of a column

   - ALTER TABLE table_name MODIFY column_name new_datatype;

  üëâ Example:

  - ALTER TABLE students MODIFY name VARCHAR(50);

4. Rename a column (MySQL way)

   - ALTER TABLE table_name CHANGE old_name new_name datatype;

  üëâ Example:

  - ALTER TABLE students CHANGE name full_name VARCHAR(50);

5. Rename the table

   - ALTER TABLE old_table_name RENAME TO new_table_name;

  üëâ Example:

   - ALTER TABLE students RENAME TO college_students;

‚ö° Key Points

 - ALTER changes the structure/schema of the table, not the data.

 - Common tasks: ADD, DROP, MODIFY, CHANGE, RENAME.


//keys
**primary key
- it is combination of two i.e is (unique + not null)
alter command - for table modificaion
alter table employee add primary key(eid);

create 
insert into
select * from
delete from 

update query is used update the table content
update employee set ename= 'Omkar' where eid=103;


                    ////*****IMP***********////
CRUD OPERATION -
insert - insert into employee values()

read - select * from employee

update - update employee set ename= 'Omkar' where eid=103;

delete - delete from employee where eid=id;

                  ////*****IMP***********////


task
create database employee;
create table employees(eid int, ename varchar(100), eemail varchar(100),euid int,primary key(eid,euid));
insert into employees(eid, ename, eemail,euid)values(1, 'rushi','rushi@gmail.com',1234567),(2,'ram','ram@gmail.com',9087643),(3,'sham','sham@gmail.com',7347983),(4,'raj','raj@gmail.com',2839480);

interview question:- 
- what is difference betwwen delete drop and truncate?
 - delete is use with the where conditioin and it removes the table data or content , Does not reset AUTO_INCREMENT counter.

 - drop table staff; remove the whole table and structure also

- truncate is use to remove all records of table not the table structure.
 - Resets AUTO_INCREMENT counter.
 - truncate table staff; //remove all the records not table


 select * from staff; //fetch the records

 //select with  condtion 
 i want perticlular id wise records
 select * from staff where sid=101;//fetch the record with given staff id
 select * from employees where eid=1 and ename= 'rushi';
 in this AND operator if 1 condition is false then it wont work
 but in OR condition if 1 condition is true then it work

 //to get only one column
 select ename from employees;
 select ename, eemail from employees;

 //question
 whos name start from a print that  records?
 - then we use LIKE operator 
 - select * from staff where ename LIKE 'A%';
 - in this '%A' then he check name from end side eg akansh'a'
 - in this 'A%' then he check name from start side eg 'a'kansha

 select * from staff where ename LIKE '_A%';
 - use this underscore to check the second name from name a'a'ditya
 select * from staff where ename LIKE '__d%';
 - use this underscore to check the third character from name aa'd'itya



//in
- select * from employee where name IN("abc","lmn","pqr","xyz");
- select * from employee where name = "abc" OR name="lmn" OR name="pqr" OR name="xyz";


//select null
- null values are used to represent missing unknown data.
- select * from employees where name is null;
- select * from employees where name is not null;
to add null data
- insert into employee(id,name)values(5,null);

//insert
- insert into employee values(6,"we",50000);
- insert into employee values(6,"we"); //error
- insert into employee(id,name) values(6,"we"); //error solve

//Joins
- types
  - inner join
     - get the only matching data from two tables.
     - select * from student1 INNER JOIN student2 ON student1.id = student2.id;//this get double id  

     to fetch proper details from two tables
     - select student1.id, student1.name, student1.address, student2.contact, student2.pincode from student1 INNER JOIN student2 ON student1.id = student2.id;
     
    - select * from student1 INNER JOIN student2 ON student1.id = student2.id;
    - select * from student1 JOIN student2 ON student1.id = student2.id;
    this two are same inner join and only join
    
  - left join
     - select * from student1 left JOIN student2 ON student1.id = student2.id; 
     - only get left side data and matching one only.
     - if there are no matching value return null.

  - Right join
     - select * from student1 right JOIN student2 ON student1.id = student2.id; 
     - only get right side data and matching one only.
     - if there are no matching value return null.

  - Full join
    - that is the combination of left join and right join.
    - select * from student1 left JOIN student2 ON student1.id = student2.id  UNION select * from student1 right JOIN student2 ON student1.id = student2.id;

  - Cross join
    - 1  1
      1  3
      2  1
      2  3  
    - select * from student1 CROSS JOIN student2;
    - select * from student1 , student2;


#question
- what is join and what are the types of joins.

#task
- select * from emp1 INNER JOIN emp2 INNER JOIN emp3 ON emp1.id = emp2.id = emp3.id;

//Data types
- INT : integer type used  for whole numbers
- varchar(100) : variable length string upto 100 characters
- Enum : a string object with a value choosen from a list of permitted value eg. ENUM :('Male',Female','Other')
- Date : Stores date values eg. date_of_birth date
- Timestamp : Stores date and time automatically set to the current Timestamp
- BOOLEAN: Stores TRUE or FALSE values, often used for flags like is_active.
- DECIMAL(10, 2): Stores exact numeric data values, useful for financial data. The first number is the total number of digits, and the second is the number of digits after the decimal point

//Constraints
- AUTO_INCREMENT : Automatically generates a unique number for each row.
- PRIMARY KEY: Uniquely identifies each row in the table. it is combination of two i.e is (unique + not null)
- NOT NULL: Ensures a column cannot have a NULL value.
- UNIQUE: Ensures all values in a column are different.
- DEFAULT: Sets a default value for a column if no value is provided. eg. created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, is_active BOOLEAN DEFAULT TRUE

//rename 
rename table user to programmers;

this is rename command use to change the prev name to new.